#settings.py

"""
Django settings for learning_task_tracker project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@0-+qpkppkct%uq^49tyv3hbe96hju3b27j5q%c5midz5q687^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    'apps.accounts',
    # 変更前（自動登録）
    # 'apps.lessons',

    # 変更後（AppConfig 経由で verbose_name を有効化）
    'apps.lessons.apps.LessonsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'learning_task_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'learning_task_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ja'
TIME_ZONE = 'Asia/Tokyo'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# 静的ファイルをどこから集めるか（collectstatic時など）
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DjangoのログインURL（認証が必要なページに未ログインでアクセスした場合のリダイレクト先）
LOGIN_URL = '/accounts/login/'

# ログイン成功後のリダイレクト先URL（例：教材一覧ページ）
LOGIN_REDIRECT_URL = '/materials/'

# ログアウト後のリダイレクト先URL（再度ログインページへ戻す）
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Djangoで使用するカスタムユーザーモデルを指定（apps.accounts アプリの CustomUser モデル）
AUTH_USER_MODEL = 'accounts.CustomUser'

# 認証方法の選択肢：
# 'email'：メールアドレス認証
# 'username'：ユーザー名認証
# 'both'：メールアドレスまたはユーザー名のいずれかで認証可能
AUTH_METHOD = 'email'  # デフォルトでメールアドレス認証を使用

# 認証バックエンドの指定
# FlexibleAuthBackend はメール/ユーザー名認証を柔軟に切り替えられるカスタム認証クラス
AUTHENTICATION_BACKENDS = [
    'apps.accounts.backends.FlexibleAuthBackend',
]

# ログ設定
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{levelname}] {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        # あなたの apps.lessons.admin のログをINFOで出力
        'apps.lessons.admin': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Djangoの全体ログも INFO以上でコンソール出力
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}